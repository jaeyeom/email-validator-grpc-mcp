syntax = "proto3";

package proto.email_validator.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/jaeyeom/email-validator-grpc-mcp/proto/email_validator";
option java_multiple_files = true;
option java_package = "com.jaeyeom.email_validator";
option java_outer_classname = "EmailValidatorProto";

//------------------------------------------------------------------------------
// Common Types and Enums
//------------------------------------------------------------------------------

// ValidationMethod defines how the validation will be performed
enum ValidationMethod {
  // Unknown or unspecified validation method
  VALIDATION_METHOD_UNSPECIFIED = 0;

  // Validation via clickable link in email/message
  VALIDATION_METHOD_LINK = 1;

  // Validation via code entry
  VALIDATION_METHOD_CODE = 2;
}

// ValidationStatus represents the current state of a validation
enum ValidationStatus {
  // Unknown or unspecified status
  VALIDATION_STATUS_UNSPECIFIED = 0;

  // Validation has been created but not yet completed
  VALIDATION_STATUS_PENDING = 1;

  // Validation was successfully completed
  VALIDATION_STATUS_VALIDATED = 2;

  // Validation expired before completion
  VALIDATION_STATUS_EXPIRED = 3;

  // Validation failed (too many attempts, etc.)
  VALIDATION_STATUS_FAILED = 4;

  // Validation was canceled by the requestor
  VALIDATION_STATUS_CANCELED = 5;
}

// ContactInfo represents a contact method that can be validated
message ContactInfo {
  // Types of contact methods supported by the system
  enum Type {
    // Unknown or unspecified contact type
    TYPE_UNSPECIFIED = 0;

    // Email address validation
    TYPE_EMAIL = 1;

    // Reserved for future phone number validation
    // TYPE_PHONE = 2;
  }

  // The type of contact information provided
  Type type = 1;

  // Contact information based on type
  oneof contact {
    // Email address to validate when type is EMAIL
    string email = 2;

    // Reserved for future phone number validation
    // PhoneNumber phone = 3;
  }
}

// message PhoneNumber {
//   string country_code = 1;
//   string number = 2;
// }

// ValidationTimestamps tracks important times in the validation lifecycle
message ValidationTimestamps {
  // When the validation was initially requested
  google.protobuf.Timestamp created_at = 1;

  // When the validation will expire if not completed
  google.protobuf.Timestamp expires_at = 2;

  // When the validation was successfully completed (if applicable)
  google.protobuf.Timestamp validated_at = 3;

  // When the validation was last updated
  google.protobuf.Timestamp updated_at = 4;
}

// ValidationRecord represents a validation attempt in the system
message ValidationRecord {
  // Unique identifier for this validation record
  string id = 1;

  // Contact information being validated
  ContactInfo contact_info = 2;

  // Validation token (link token or verification code)
  string token = 3;

  // Method used for this validation
  ValidationMethod method = 4;

  // Current status of the validation
  ValidationStatus status = 5;

  // Timestamps for tracking the validation lifecycle
  ValidationTimestamps timestamps = 6;

  // Client-provided metadata from the original request
  map<string, string> metadata = 7;

  // Number of verification attempts made
  int32 attempt_count = 8;

  // Maximum number of attempts allowed
  int32 max_attempts = 9;

  // Reserved for future fields
  reserved 10 to 15;
}

//------------------------------------------------------------------------------
// Request Messages
//------------------------------------------------------------------------------

// TemplateOptions allows customization of validation emails/messages
message TemplateOptions {
  // Template name to use for the validation message
  string template_name = 1;

  // Subject line for email validations
  string subject = 2;

  // Sender name to display in the email
  string sender_name = 3;

  // Reply-to address for email validations
  string reply_to = 4;

  // URL to redirect to after successful validation
  string success_redirect_url = 5;

  // URL to redirect to after failed validation
  string failure_redirect_url = 6;

  // Custom template variables
  map<string, string> variables = 7;
}

// ValidationConfig defines settings for the validation process
message ValidationConfig {
  // Method to use for validation (link or code)
  ValidationMethod method = 1;

  // How long the validation should remain valid
  google.protobuf.Duration expiration = 2;

  // Maximum number of verification attempts allowed
  int32 max_attempts = 3;

  // Template options for email/message customization
  TemplateOptions template_options = 4;

  // Reserved for future configuration options
  reserved 5 to 10;
}

// RequestValidationRequest initiates the validation of a contact method
message RequestValidationRequest {
  // Contact information to validate (email, phone in future)
  ContactInfo contact_info = 1;

  // Configuration options for this validation
  ValidationConfig config = 2;

  // Client-provided metadata for tracking and context
  map<string, string> metadata = 3;
}

// CheckStatusRequest retrieves the current status of a validation
message CheckStatusRequest {
  // One of the following must be provided
  oneof identifier {
    // The validation record ID
    string validation_id = 1;
    // The contact information that was validated
    ContactInfo contact_info = 2;
  }
}

// VerifyCodeRequest submits a verification code for validation
message VerifyCodeRequest {
  // One of the following must be provided
  oneof identifier {
    // The validation record ID
    string validation_id = 1;
    // The contact information that was validated
    ContactInfo contact_info = 2;
  }

  // The verification code to validate
  string code = 3;
}

// CancelValidationRequest cancels a pending validation
message CancelValidationRequest {
  // One of the following must be provided
  oneof identifier {
    // The validation record ID
    string validation_id = 1;
    // The contact information that was validated
    ContactInfo contact_info = 2;
  }
}

// ExtendExpirationRequest extends the expiration time of a pending validation
message ExtendExpirationRequest {
  // One of the following must be provided
  oneof identifier {
    // The validation record ID
    string validation_id = 1;
    // The contact information that was validated
    ContactInfo contact_info = 2;
  }

  // How long to extend the expiration by
  google.protobuf.Duration extension = 3;
}

//------------------------------------------------------------------------------
// Response Messages
//------------------------------------------------------------------------------

// RequestValidationResponse provides the result of a validation request
message RequestValidationResponse {
  // Unique identifier for this validation record
  string id = 1;

  // Contact information being validated
  ContactInfo contact_info = 2;

  // Validation token (link token or verification code)
  string token = 3;

  // Method used for this validation
  ValidationMethod method = 4;

  // Current status of the validation
  ValidationStatus status = 5;

  // Timestamps for tracking the validation lifecycle
  ValidationTimestamps timestamps = 6;

  // Client-provided metadata from the original request
  map<string, string> metadata = 7;
}

// CheckStatusResponse provides the current status of a validation
message CheckStatusResponse {
  // Current status of the validation
  ValidationStatus status = 1;

  // Validation record ID
  string validation_id = 2;

  // Contact information being validated
  ContactInfo contact_info = 3;

  // Timestamps for the validation
  ValidationTimestamps timestamps = 4;
}

// VerifyCodeResponse provides the result of a verification code submission
message VerifyCodeResponse {
  // Current status of the validation
  ValidationStatus status = 1;

  // Validation record ID
  string validation_id = 2;

  // Contact information being validated
  ContactInfo contact_info = 3;

  // Timestamps for the validation
  ValidationTimestamps timestamps = 4;
}

// CancelValidationResponse provides the result of a validation cancellation request
message CancelValidationResponse {
  // Whether the cancellation was successful
  bool success = 1;

  // Optional message providing additional details
  string message = 2;
}

// ExtendExpirationResponse provides the result of an expiration extension request
message ExtendExpirationResponse {
  // Unique identifier for this validation record
  string id = 1;

  // Contact information being validated
  ContactInfo contact_info = 2;

  // Validation token (link token or verification code)
  string token = 3;

  // Method used for this validation
  ValidationMethod method = 4;

  // Current status of the validation
  ValidationStatus status = 5;

  // Timestamps for tracking the validation lifecycle (with updated expiration)
  ValidationTimestamps timestamps = 6;

  // Client-provided metadata from the original request
  map<string, string> metadata = 7;
}

//------------------------------------------------------------------------------
// Service Definition
//------------------------------------------------------------------------------

// EmailValidatorService provides methods for validating email addresses
service EmailValidatorService {
  // Initiates the validation process for a contact method (currently email only)
  // Returns a validation record with a unique ID and token
  rpc RequestValidation(RequestValidationRequest) returns (RequestValidationResponse);

  // Retrieves the current status of a validation request
  // Can be queried by validation ID or contact information
  rpc CheckStatus(CheckStatusRequest) returns (CheckStatusResponse);

  // Verifies a code submitted by the user (for CODE validation method)
  // Returns the updated status of the validation
  rpc VerifyCode(VerifyCodeRequest) returns (VerifyCodeResponse);

  // Cancels a pending validation request
  // No effect if validation is already completed or expired
  rpc CancelValidation(CancelValidationRequest) returns (CancelValidationResponse);

  // Extends the expiration time of a pending validation
  // Returns the updated validation record with new expiration time
  rpc ExtendExpiration(ExtendExpirationRequest) returns (ExtendExpirationResponse);
}
